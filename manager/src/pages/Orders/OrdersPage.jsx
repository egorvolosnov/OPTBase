import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Header from '../../components/Header/Header';
import Footer from '../../components/Footer/Footer';
import './OrdersPage.css';

const OrdersPage = () => {
  const [orders, setOrders] = useState([]);
  const [filteredOrders, setFilteredOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [orderDetails, setOrderDetails] = useState({
    products: [],
    delivery: {},
    warehouse: {}
  });
  const [formData, setFormData] = useState({
    products: [],
    deliveryService: '',
    warehouseId: ''
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [showTodayOrders, setShowTodayOrders] = useState(false);
  const [allProducts, setAllProducts] = useState([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [ordersRes, productsRes] = await Promise.all([
          fetch('http://localhost:5000/api/orders'),
          fetch('http://localhost:5000/api/products')
        ]);

        if (!ordersRes.ok || !productsRes.ok) {
          throw new Error('Network response was not ok');
        }

        const [ordersData, productsData] = await Promise.all([
          ordersRes.json(),
          productsRes.json()
        ]);

        setOrders(ordersData);
        setFilteredOrders(ordersData);
        setAllProducts(productsData);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    let result = [...orders];
    
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      result = result.filter(order => 
        order.id.toString().includes(term) ||
        order.customer.toLowerCase().includes(term) ||
        order.date.includes(term) ||
        order.status.toLowerCase().includes(term)
      );
    }
    
    if (showTodayOrders) {
      const today = new Date().toISOString().split('T')[0];
      result = result.filter(order => order.date === today);
    }
    
    setFilteredOrders(result);
  }, [searchTerm, showTodayOrders, orders]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
  const fetchOrderDetails = async (orderId) => {
    try {
      const [orderRes, productsRes, deliveryRes] = await Promise.all([
        fetch(`http://localhost:5000/api/orders/${orderId}`),
        fetch(`http://localhost:5000/api/orders/${orderId}/products`),
        fetch(`http://localhost:5000/api/orders/${orderId}/delivery`)
      ]);

      if (!orderRes.ok || !productsRes.ok || !deliveryRes.ok) {
        throw new Error('Failed to fetch order details');
      }

      const [order, products, delivery] = await Promise.all([
        orderRes.json(),
        productsRes.json(),
        deliveryRes.json()
      ]);

      setOrderDetails({
        ...order,
        products,
        delivery,
      });

      setFormData({
        products: products.map(p => ({
          productId: p.productId,
          name: p.name,
          quantity: p.quantity,
          price: p.price,
          unit: p.unit
        })),
      });
    } catch (err) {
      setError(err.message);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  const handleAddProduct = () => {
    if (allProducts.length > 0) {
      setFormData(prev => ({
        ...prev,
        products: [
          ...prev.products,
          {
            productId: allProducts[0].id,
            name: allProducts[0].name,
            quantity: 1,
            price: allProducts[0].price,
            unit: allProducts[0].unit
          }
        ]
      }));
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  const handleRemoveProduct = (index) => {
    setFormData(prev => ({
      ...prev,
      products: prev.products.filter((_, i) => i !== index)
    }));
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const handleDeleteOrder = async () => {
    try {
      const response = await fetch(`http://localhost:5000/api/orders/${selectedOrder.id}`, {
        method: 'DELETE'
      });

      if (!response.ok) throw new Error('Failed to delete order');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      const ordersResponse = await fetch('http://localhost:5000/api/orders');
      const ordersData = await ordersResponse.json();
      setOrders(ordersData);
      setFilteredOrders(ordersData);
      
      setIsDeleteModalOpen(false);
      setIsViewModalOpen(false);
    } catch (err) {
      setError(err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const handleViewClick = async (order) => {
    setSelectedOrder(order);
    await fetchOrderDetails(order.id);
    setIsViewModalOpen(true);
  };

  const handleEditClick = async (order) => {
    setSelectedOrder(order);
    await fetchOrderDetails(order.id);
    setIsEditModalOpen(true);
  };

  const handleDeleteClick = (order) => {
    setSelectedOrder(order);
    setIsDeleteModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsViewModalOpen(false);
    setIsEditModalOpen(false);
    setIsDeleteModalOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleProductChange = (index, field, value) => {
    const updatedProducts = [...formData.products];
    
    if (field === 'productId') {
      const selectedProduct = allProducts.find(p => p.id == value);
      if (selectedProduct) {
        updatedProducts[index].productId = value;
        updatedProducts[index].name = selectedProduct.name;
        updatedProducts[index].price = selectedProduct.price;
        updatedProducts[index].unit = selectedProduct.unit;
      }
    } else {
      updatedProducts[index][field] = field === 'quantity' || field === 'price' 
        ? parseInt(value) || 0 
        : value;
    }
    
    setFormData(prev => ({ ...prev, products: updatedProducts }));
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`http://localhost:5000/api/orders/${selectedOrder.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          products: formData.products.map(p => ({
            Id_product: p.productId,
            quantity: p.quantity,
            price: p.price
          })),
          deliveryService: formData.deliveryService
        })
      });

      if (!response.ok) throw new Error('Failed to update order');

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const ordersResponse = await fetch('http://localhost:5000/api/orders');
      const ordersData = await ordersResponse.json();
      setOrders(ordersData);
      await fetchOrderDetails(selectedOrder.id);
      
      setIsEditModalOpen(false);
    } catch (err) {
      setError(err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI
  const handleSearch = (e) => setSearchTerm(e.target.value);
  const toggleTodayOrders = () => setShowTodayOrders(!showTodayOrders);

  if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  if (error) return <div className="error">–û—à–∏–±–∫–∞: {error}</div>;

  return (
    <div className="home-page">
      <Header />

      <section className="hero">
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h1>
        <p>–ü—Ä–æ—Å–º–æ—Ç—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π</p>
      </section>

      <section className="dashboard">
        <div className="dashboard-grid">
          <Link to="/new" className="dashboard-card">
            <h3>‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</h3>
            <p>–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</p>
          </Link>
          <div 
            className={`dashboard-card ${showTodayOrders ? 'active' : ''}`} 
            onClick={toggleTodayOrders}
          >
            <h3>üìÖ –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h3>
            <p>{showTodayOrders ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã</p>
          </div>
          <div className="dashboard-card">
            <h3>üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤</h3>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É, –∫–ª–∏–µ–Ω—Ç—É..."
              value={searchTerm}
              onChange={handleSearch}
              className="search-input"
            />
          </div>
        </div>
      </section>

      <section className="description">
        <div className="orders-header">
          <h2>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</h2>
          <div className="orders-count">
            –ù–∞–π–¥–µ–Ω–æ: {filteredOrders.length} –∑–∞–∫–∞–∑–æ–≤
          </div>
        </div>
        <div className="orders-table">
          <table>
            <thead>
              <tr>
                <th>‚Ññ –ó–∞–∫–∞–∑–∞</th>
                <th>–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å</th>
                <th>–î–∞—Ç–∞</th>
                <th>–°—É–º–º–∞</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map(order => (
                  <tr key={order.id}>
                    <td>{order.id}</td>
                    <td>{order.customer}</td>
                    <td>{new Date(order.date).toLocaleDateString('ru-RU')}</td>
                    <td>{order.amount.toLocaleString()} ‚ÇΩ</td>
                    <td>
                      <span className={`status-badge status-${order.status.toLowerCase().replace(' ', '-')}`}>
                        {order.status}
                      </span>
                    </td>
                    <td>
                      <button 
                        onClick={() => handleViewClick(order)} 
                        className="action-link"
                      >
                        –ü—Ä–æ—Å–º–æ—Ç—Ä
                      </button>
                      <button 
                        onClick={() => handleEditClick(order)} 
                        className="action-link"
                      >
                        –ò–∑–º–µ–Ω–∏—Ç—å
                      </button>
                      <button 
                        onClick={() => handleDeleteClick(order)} 
                        className="action-link delete"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="6" className="no-orders">
                    –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </section>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      {isViewModalOpen && (
        <div className="modal-overlay">
          <div className="modal">
            <h2>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{selectedOrder.id}</h2>
            <div className="modal-content">
              <div className="order-section">
                <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p><strong>–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å:</strong> {selectedOrder.customer}</p>
                <p><strong>–î–∞—Ç–∞:</strong> {new Date(selectedOrder.date).toLocaleDateString('ru-RU')}</p>
                <p><strong>–°—É–º–º–∞:</strong> {selectedOrder.amount.toLocaleString()} ‚ÇΩ</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {selectedOrder.status}</p>
              </div>

              <div className="order-section">
                <h3>–¢–æ–≤–∞—Ä—ã</h3>
                <table className="products-table">
                  <thead>
                    <tr>
                      <th>–¢–æ–≤–∞—Ä</th>
                      <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th>–¶–µ–Ω–∞</th>
                      <th>–°—É–º–º–∞</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orderDetails.products.map((product, index) => (
                      <tr key={index}>
                        <td>{product.name}</td>
                        <td>{product.quantity} {product.unit}</td>
                        <td>{product.price} ‚ÇΩ</td>
                        <td>{product.price * product.quantity} ‚ÇΩ</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="order-section">
                <h3>–î–æ—Å—Ç–∞–≤–∫–∞</h3>
                <p><strong>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:</strong> {orderDetails.delivery.dateFrom ? new Date(orderDetails.delivery.dateFrom).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                <p><strong>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</strong> {orderDetails.delivery.dateTo ? new Date(orderDetails.delivery.dateTo).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
              </div>

              <div className="modal-actions">
                <button 
                  onClick={() => handleDeleteClick(selectedOrder)} 
                  className="btn-delete"
                >
                  –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
                <button onClick={handleCloseModal} className="modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isEditModalOpen && (
        <div className="modal-overlay">
          <div className="modal">
            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{selectedOrder.id}</h2>
            <form onSubmit={handleSubmit} className="modal-content">
              <div className="form-section">
                <div className="form-section-header">
                  <h3>–¢–æ–≤–∞—Ä—ã</h3>
                  <button 
                    type="button" 
                    onClick={handleAddProduct}
                    className="btn-add-product"
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                  </button>
                </div>
                <table className="products-table">
                  <thead>
                    <tr>
                      <th>–¢–æ–≤–∞—Ä</th>
                      <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th>–¶–µ–Ω–∞</th>
                      <th>–ï–¥. –∏–∑–º.</th>
                      <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {formData.products.map((product, index) => (
                      <tr key={index}>
                        <td>
                          <select
                            value={product.productId}
                            onChange={(e) => handleProductChange(index, 'productId', e.target.value)}
                          >
                            {allProducts.map(p => (
                              <option key={p.id} value={p.id}>{p.name}</option>
                            ))}
                          </select>
                        </td>
                        <td>
                          <input
                            type="number"
                            value={product.quantity}
                            onChange={(e) => handleProductChange(index, 'quantity', e.target.value)}
                            min="1"
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={product.price}
                            onChange={(e) => handleProductChange(index, 'price', e.target.value)}
                            min="1"
                          />
                        </td>
                        <td>
                          {product.unit}
                        </td>
                        <td>
                          <button 
                            type="button"
                            onClick={() => handleRemoveProduct(index)}
                            className="btn-remove-product"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="form-actions">
                <button type="submit" className="btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                <button type="button" onClick={handleCloseModal} className="btn-secondary">–û—Ç–º–µ–Ω–∞</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {isDeleteModalOpen && (
        <div className="modal-overlay">
          <div className="modal confirmation-modal">
            <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h2>
            <div className="modal-content">
              <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{selectedOrder?.id}?</p>
              <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
              
              <div className="modal-actions">
                <button 
                  onClick={handleDeleteOrder}
                  className="btn-delete"
                >
                  –î–∞, —É–¥–∞–ª–∏—Ç—å
                </button>
                <button 
                  onClick={handleCloseModal}
                  className="btn-secondary11"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <Footer />
    </div>
  );
};

export default OrdersPage;